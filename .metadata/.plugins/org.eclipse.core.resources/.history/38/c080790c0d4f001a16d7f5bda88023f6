#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <sys/neutrino.h>
#include <sys/dispatch.h>
#include <sys/types.h>
#include <sys/iofunc.h> 
#include <pthread.h>
#include <process.h>
#include <unistd.h> 

#include "myresmgr.h"



void *create_folder_manager(void *path){
	printf("Folder manager created 1\n");
	thread_pool_attr_t  pool_attr;
    thread_pool_t       *tpp;
    dispatch_t          *dpp;
    resmgr_attr_t       resmgr_attr;

    //resmgr_context_t    *ctp;
    int                 id;


 	printf("Folder manager created 1\n");
    if ((dpp = dispatch_create ()) == NULL)
    {
    	printf("Ошибка создания префикса:  \n");
        return NULL;
    }

    memset (&pool_attr, 0, sizeof (pool_attr));
    pool_attr.handle = dpp;
    pool_attr.context_alloc = resmgr_context_alloc;
    pool_attr.block_func = resmgr_block;
    pool_attr.handler_func = resmgr_handler;
    pool_attr.context_free = resmgr_context_free;

    // 1) Настроить пул потоков
    pool_attr.lo_water = 2;
    pool_attr.hi_water = 4;
    pool_attr.increment = 1;
    pool_attr.maximum = 50;
    if ((tpp = thread_pool_create (&pool_attr, POOL_FLAG_EXIT_SELF)) == NULL)
    {
    	printf("Ошибка создания префикса: \n");
        return NULL;
    }

    iofunc_func_init (_RESMGR_CONNECT_NFUNCS, &connect_funcs,
                      _RESMGR_IO_NFUNCS, &io_funcs);

     io_funcs.write = io_write;
    
  

    iofunc_attr_init (&attr, S_IFNAM | 0777, 0, 0);

    // 2) Переопределить функции установления соединения
    // и функции ввода/вывода, как надо

    memset (&resmgr_attr, 0, sizeof (resmgr_attr));
    resmgr_attr.nparts_max = 1;
    resmgr_attr.msg_max_size = 2048;

    // 3) Замените "/dev/whatever" на нужный префикс
    char *data = (char *)path;
    if ((id = resmgr_attach (dpp, &resmgr_attr, data,
                             _FTYPE_ANY, 0, &connect_funcs, &io_funcs, &attr)) == -1)
    {
    	printf("Ошибка создания префикса: %s \n",data);
        return NULL;
    }

    // Отсюда возврата уже не будет
    printf("Folder manager created: %s \n",data);
    thread_pool_start (tpp);
    printf("Folder manager closed: %s \n",data);
}


void process_data (int offset, void *buffer, int nbytes)
{
    char* data = (char *)buffer;
    if (strcmp(data,"MOUNT")==0){
    	printf("Mount command: %s\n",data);
    }else{
    	pid_t pid;
    	
    	pid = fork();
    	
    	
    	if( pid == 0 ) {
      /* This is the child process.
       * Move read end of the pipe to stdin ( 0 ),
       * close any extraneous file descriptors,
       * then use exec to 'become' the command.
       */
     		create_folder_manager(data);

  /* This can only happen if exec fails; print message
   * and exit.
   */
      		printf("can not create folder manager");
      
      		return;
    } else {
    	
    	printf("Not mount command: %s\n",data);
    	printf("Folder manager created 1\n");
    	 pthread_t thread1;
    		int i1;
    	
    	i1 = pthread_create( &thread1, NULL, create_folder_manager,(void *)data);
    	

    }
}
}

int io_write (resmgr_context_t *ctp, io_write_t *msg,
              iofunc_ocb_t *ocb)
{
	printf("Write\n");
    int sts;
    int nbytes;
    int off;
    int start_data_offset;
    int xtype;
    char *buffer;
    struct _xtype_offset *xoffset;

    // Проверить, открыто ли устройство на запись
    if ((sts = iofunc_write_verify (ctp, msg, ocb, NULL)) != EOK )
        return (sts);

    // 1. Проверить и обработать переопределение XTYPE
    xtype = msg -> i.xtype & _IO_XTYPE_MASK;
    if (xtype == _IO_XTYPE_OFFSET)
    {
        xoffset = (struct _xtype_offset *) (&msg -> i + 1);
        start_data_offset = sizeof (msg -> i) + sizeof(*xoffset);
        off = xoffset -> offset;
    } else if (xtype == _IO_XTYPE_NONE)
    {
        off = ocb -> offset;
        start_data_offset = sizeof (msg -> i);
    } else
        return (ENOSYS);

    // 2. Выделить достаточно большой буфер для данных
    nbytes = msg -> i.nbytes;
    if ((buffer = (char *) malloc (nbytes)) == NULL)
        return (ENOMEM);

    // 3. Считать данные от клиента (возможно, повторно)
    if (resmgr_msgread (ctp, buffer, nbytes, start_data_offset) == -1)
    {
        free (buffer);
        return (errno);
    }

    // 4. Сделать что-нибудь с данными
    process_data (off, buffer, nbytes);

    // 5. Освободить память буфера
    free (buffer);

    // 6. Установить, сколько байт должна возвращать клиентская функция "write"
    _IO_SET_WRITE_NBYTES (ctp, nbytes);

    // 7. Если данные записаны, обновить структуры данных POSIX и смещение OCB
    if (nbytes)
    {
        ocb -> attr -> flags |= IOFUNC_ATTR_MTIME | IOFUNC_ATTR_DIRTY_TIME;
        if (xtype == _IO_XTYPE_NONE)
            ocb -> offset += nbytes;
    }

    // 8. Пусть библиотека сама ответит, что все в порядке
    return (EOK);
}